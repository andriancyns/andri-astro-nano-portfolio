---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import BackToPrev from "@components/BackToPrev.astro";
import Link from "@components/Link.astro";
import { type Language } from "../../../i18n";

export async function getStaticPaths() {
  const projects = (await getCollection("projects"))
    .filter(post => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }));
}
type Props = CollectionEntry<"projects">;

const project = Astro.props;
const { Content } = await project.render();
const currentLang: Language = 'en';

// Get English title and description
const displayTitle = (project.data.titleEn && currentLang === 'en') 
  ? project.data.titleEn 
  : project.data.title;

const displayDescription = (project.data.descriptionEn && currentLang === 'en') 
  ? project.data.descriptionEn 
  : project.data.description;

// Breadcrumb items for project
const breadcrumbItems = [
  { name: "Home", url: "/en/" },
  { name: "Projects", url: "/en/projects" },
  { name: displayTitle, url: `/en/projects/${project.slug}` }
];
---

<PageLayout 
  title={`${displayTitle} | Portfolio Andrian Cahyono`} 
  description={displayDescription}
  breadcrumbItems={breadcrumbItems}
  currentLang={currentLang}
>
  <Container>
    <div class="animate">
      <BackToPrev href="/en/projects">
        Back to projects
      </BackToPrev>
    </div>
    <div class="space-y-1 my-10">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={project.data.date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(project.body)}
        </div>
      </div>
      <div class="animate text-2xl font-semibold text-black dark:text-white">
        {displayTitle}
      </div>
      {(project.data.demoURL || project.data.repoURL) && (
        <nav class="animate flex gap-1">
          {project.data.demoURL && (
            <Link href={project.data.demoURL} external>
              demo
            </Link>
          )}
          {project.data.demoURL && project.data.repoURL && (
            <span>/</span>
          )}
          {project.data.repoURL && (
            <Link href={project.data.repoURL} external>
              repo
            </Link>
          )}
        </nav>
      )}
    </div>
    <article class="animate">
      <Content />
    </article>
  </Container>
</PageLayout>